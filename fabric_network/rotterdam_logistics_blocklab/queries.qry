/**
	HyperLedger composer named queries defintion file
    
    Query Language reference: 
     - https://hyperledger.github.io/composer/reference/query-language.html
     - https://hyperledger.github.io/composer/business-network/query.html
     
     Quick notes:
     	- external parameters are prefixed by '_$', only primitive values are accepted
        - SELECT keyword defines the asset type returned & on which the WHERE will act
        - FROM keyword selects a different registry but the type contained therein must be of the type defined by SELECT
        	(https://stackoverflow.com/questions/46174110/hyperledger-composer-from-query-language)
        - example with references (https://stackoverflow.com/questions/46455673/composer-query-to-match-a-participant-reference)
*/

/**
	Params:
     - id (String) = ContainerDeliveryJobOffer.containerDeliveryJobOfferId
*/
query FindContainerDeliveryJobOfferById {
	description: "Find a ContainerDeliveryJobOffer by its Id"
	statement:
		SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJobOffer
  		WHERE (_$id == containerDeliveryJobOfferId)
}

/** 	
 	TODO: Would it be easier result in better architecture, improve extendability and usability to have Truckers create
 	TruckerJobSearchNotice? This way truckers can have multiple days they're searching for work in advance.

	Params:
     - availableFrom (DateTime) = DateTime of moment from which the container is to be picked-up (Trucker.availability.from)
     - availableTo (DateTime) = DateTime of moment until the container can be picked-up (Trucker.availability.to)
     - requiredAdrTraining = AdrTraining required for the job (Trucker.adrTraining)
     - maxDistanceToDestination - Maximum (approximate) distance to the destination from the Port of Rotterdam
 */
query FindEligableContainerDeliveryJobOffers {
	description: "Returns Job Offers that the Trucker is eligable to bid on"
  	statement:
  		SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJobOffer
  		WHERE (status == "INMARKET"
        AND (_$availableFrom <= availableForPickupDateTime AND availableForPickupDateTime <= _$availableTo)
  			AND (_$requiredAdrTraining == requiredAdrTraining OR requiredAdrTraining == "NONE")
        AND (approxDistanceToDestination <= _$maxDistanceToDestination))
      LIMIT 100

}

/**
 * Params:
 *   - containerGuyRef (reference string ('resource:namespace.type#id') to ContainerGuy participant)
 */
query FindContainerInfoByContainerGuyId {
  description: "Returns all ContainerInfo that the ContainerGuy has created"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerInfo
        WHERE (owner == _$containerGuyRef)
} 

/**
 * Params:
 *   - containerGuyId (String): Id of ContainerGuy who created the offer 
 */
query FindContainerDeliveryJobOffersByContainerGuyId {
  description: "Returns all ContainerDeliveryJobOffers that the ContainerGuy has created"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJobOffer
        WHERE (containerGuyId == _$containerGuyId)
}   

/**
 * Params:
 *   - truckerId (String): Id of trucker who bid, NO ITS TRUCKER REF!
 */
query FindAllTruckerBidOnContainerJobOffer {
  description: "Returns all TruckerBidOnContainerJobOffer that the Trucker made"
  statement:
    SELECT nl.tudelft.blockchain.logistics.TruckerBidOnContainerJobOffer
        WHERE (bidder == _$truckerId)
}

/**
 * Params:
 *   - truckerRef (reference string ('resource:namespace.type#id') to Trucker participant)
 *   - candidateJobPickupDateTime (DateTime):
 *   - candidateJobToBeDeliveredByDateTime (DateTime):
 */
query FindAnyConflictingAcceptedJobsForTrucker {
  description: "Returns any conflicting, accepted job by the given Trucker that conflict (has overlap in pickup<->delivery times)"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJob
    WHERE (
      contractedTrucker == _$truckerRef
      AND (
        (availableForPickupDateTime <= _$candidateJobPickupDateTime AND _$candidateJobPickupDateTime <= toBeDeliveredByDateTime)
        OR (availableForPickupDateTime <= _$candidateJobToBeDeliveredByDateTime AND _$candidateJobToBeDeliveredByDateTime <= toBeDeliveredByDateTime)
        OR (_$candidateJobPickupDateTime <= availableForPickupDateTime AND toBeDeliveredByDateTime <= _$candidateJobToBeDeliveredByDateTime)
      )
    )
    LIMIT 1 // finding one is enough to signal that there is a conflict somewhere
}

/**
 * Params:
 *   - truckerRef (reference string ('resource:namespace.type#id') to Trucker participant)
 */
query FindContractedJobsOfTrucker {
  description: "Returns all (9999 max) jobs that the Trucker is accepted in, and is contracted so Accepted Jobs that are active"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJob
    WHERE (contractedTrucker == _$truckerRef AND status == "CONTRACTED")
    LIMIT 9999 // Large limit, needs a better long-term solution for Production
}

/**
 * Params:
 *   - containerGuyId (reference string ('resource:namespace.type#id') to Trucker participant)
 *
 * Note: "contracted" job offer sounds strange but it is still tracking the overal state of the job, the tx code
 *       keeps their state in-sync, we need this for easier querying in the noSQL world we're in here
 */
query FindContractedJobOffersForContainerGuy {
  description: "Returns all (9999 max) jobs that are contracted (are active)"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJobOffer
    WHERE (containerGuyId == _$containerGuyId AND status == "CONTRACTED")
    LIMIT 9999 // Large limit, needs a better long-term solution for Production
}

/**
 * Params:
 *   - containerDeliveryJobOfferRef (reference string ('resource:namespace.typeid#id') to containerDeliverJobOffer)
 */
query FindContractedJobsByJobOfferId {
  description: "Searches for contracted job for given JobOffer, can only be one contracted (but more if including cancelled)"
  statement:
    SELECT nl.tudelft.blockchain.logistics.ContainerDeliveryJob
    WHERE (jobOffer == _$containerDeliveryJobOfferRef AND status == "CONTRACTED")
}